syntax = "proto2";

package bgs.protocol.account.v1;

import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/rpc_types.proto";

option optimize_for = CODE_SIZE;

message AccountId {
    required fixed32 id = 1;
}

message AccountLicense {
    required uint32 id = 1;
    optional uint64 expires = 2;
}

message GameAccountHandle {
    required fixed32 id = 1;
    required fixed32 program = 2;
    required uint32 region = 3;
}

message AccountReference {
    optional fixed32 id = 1;
    optional string email = 2;
    optional GameAccountHandle handle = 3;
    optional string battle_tag = 4;
    optional uint32 region = 10 [default = 0];
}

message Identity {
    optional AccountId account = 1;
    optional GameAccountHandle game_account = 2;
    optional ProcessId process = 3;
}

message ProgramTag {
    optional fixed32 program = 1;
    optional fixed32 tag = 2;
}

message RegionTag {
    optional fixed32 region = 1;
    optional fixed32 tag = 2;
}

message AccountFieldTags {
    optional fixed32 account_level_info_tag = 2;
    optional fixed32 privacy_info_tag = 3;
    optional fixed32 parental_control_info_tag = 4;
    repeated ProgramTag game_level_info_tags = 7;
    repeated ProgramTag game_status_tags = 9;
    repeated RegionTag game_account_tags = 11;
}

message GameAccountFieldTags {
    optional fixed32 game_level_info_tag = 2;
    optional fixed32 game_time_info_tag = 3;
    optional fixed32 game_status_tag = 4;
    optional fixed32 raf_info_tag = 5;
}

message AccountFieldOptions {
    optional bool all_fields = 1;
    optional bool field_account_level_info = 2;
    optional bool field_privacy_info = 3;
    optional bool field_parental_control_info = 4;
    optional bool field_game_level_info = 6;
    optional bool field_game_status = 7;
    optional bool field_game_accounts = 8;
}

message GameAccountFieldOptions {
    optional bool all_fields = 1;
    optional bool field_game_level_info = 2;
    optional bool field_game_time_info = 3;
    optional bool field_game_status = 4;
    optional bool field_raf_info = 5;
}

message SubscriberReference {
    optional uint64 object_id = 1 [default = 0];
    optional EntityId entity_id = 2;
    optional AccountFieldOptions account_options = 3;
    optional AccountFieldTags account_tags = 4;
    optional GameAccountFieldOptions game_account_options = 5;
    optional GameAccountFieldTags game_account_tags = 6;
    optional uint64 subscriber_id = 7 [default = 0];
}

message AccountLevelInfo {
    repeated AccountLicense licenses = 3;
    optional fixed32 default_currency = 4;
    optional string country = 5;
    optional uint32 preferred_region = 6;
    optional string full_name = 7;
    optional string battle_tag = 8;
    optional bool muted = 9;
    optional bool manual_review = 10;
    optional bool account_paid_any = 11;
    optional IdentityVerificationStatus identity_check_status = 12;
    optional string email = 13;
    optional bool headless_account = 14;
}

message PrivacyInfo {
    optional bool is_using_rid = 3;
    optional bool is_visible_for_view_friends = 4;
    optional bool is_hidden_from_friend_finder = 5;
    
    optional GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
    enum GameInfoPrivacy {
        PRIVACY_ME = 0;
        PRIVACY_FRIENDS = 1;
        PRIVACY_EVERYONE = 2;
    }
}

message ParentalControlInfo {
    optional string timezone = 3;
    optional uint32 minutes_per_day = 4;
    optional uint32 minutes_per_week = 5;
    optional bool can_receive_voice = 6;
    optional bool can_send_voice = 7;
    repeated bool play_schedule = 8;
}

message GameLevelInfo {
    optional bool is_trial = 4;
    optional bool is_lifetime = 5;
    optional bool is_restricted = 6;
    optional bool is_beta = 7;
    optional string name = 8;
    optional fixed32 program = 9;
    repeated AccountLicense licenses = 10;
    optional uint32 realm_permissions = 11;
}

message GameTimeInfo {
    optional bool is_unlimited_play_time = 3;
    optional uint64 play_time_expires = 5;
    optional bool is_subscription = 6;
    optional bool is_recurring_subscription = 7;
}

message GameTimeRemainingInfo {
    optional uint32 minutes_remaining = 1;
    optional uint32 parental_daily_minutes_remaining = 2;
    optional uint32 parental_weekly_minutes_remaining = 3;
    optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
}

message GameStatus {
    optional bool is_suspended = 4;
    optional bool is_banned = 5;
    optional uint64 suspension_expires = 6;
    optional fixed32 program = 7;
    optional bool is_locked = 8;
    optional bool is_bam_unlockable = 9;
}

message RAFInfo {
    optional bytes raf_info = 1;
}

message GameSessionInfo {
    optional uint32 start_time = 3 [deprecated = true];
    optional GameSessionLocation location = 4;
    optional bool has_benefactor = 5;
    optional bool is_using_igr = 6;
    optional bool parental_controls_active = 7;
    optional uint64 start_time_sec = 8;
    optional IgrId igr_id = 9;
}

message GameSessionUpdateInfo {
    optional CAIS cais = 8;
}

message GameSessionLocation {
    optional string ip_address = 1;
    optional uint32 country = 2;
    optional string city = 3;
}

message CAIS {
    optional uint32 played_minutes = 1;
    optional uint32 rested_minutes = 2;
    optional uint64 last_heard_time = 3 [deprecated = true];
}

message GameAccountList {
    optional uint32 region = 3;
    repeated GameAccountHandle handle = 4;
}

message AccountState {
    optional AccountLevelInfo account_level_info = 1;
    optional PrivacyInfo privacy_info = 2;
    optional ParentalControlInfo parental_control_info = 3;
    repeated GameLevelInfo game_level_info = 5;
    repeated GameStatus game_status = 6;
    repeated GameAccountList game_accounts = 7;
}

message AccountStateTagged {
    optional AccountState account_state = 1;
    optional AccountFieldTags account_tags = 2;
}

message GameAccountState {
    optional GameLevelInfo game_level_info = 1;
    optional GameTimeInfo game_time_info = 2;
    optional GameStatus game_status = 3;
    optional RAFInfo raf_info = 4;
}

message GameAccountStateTagged {
    optional GameAccountState game_account_state = 1;
    optional GameAccountFieldTags game_account_tags = 2;
}

message AuthorizedData {
    optional string data = 1;
    repeated uint32 license = 2;
}

message IgrId {
    oneof type {
        GameAccountHandle game_account = 1;
        fixed32 external_id = 2;
    }
}

message IgrAddress {
    optional string client_address = 1;
    optional uint32 region = 2;
}

enum IdentityVerificationStatus {
    IDENT_NO_DATA = 0;
    IDENT_PENDING = 1;
    IDENT_FAILED = 4;
    IDENT_SUCCESS = 5;
    IDENT_SUCC_MNL = 6;
    IDENT_UNKNOWN = 7;
}
